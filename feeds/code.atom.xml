<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SmileHacker</title><link href="http://smilehacker.com/" rel="alternate"></link><link href="http://smilehacker.com/feeds/code.atom.xml" rel="self"></link><id>http://smilehacker.com/</id><updated>2013-02-07T21:27:06+08:00</updated><entry><title>利用rsync自动同步服务器与本地代码的python脚本</title><link href="http://smilehacker.com/li-yong-rsynczi-dong-tong-bu-fu-wu-qi-yu-ben-di-dai-ma-de-pythonjiao-ben.html" rel="alternate"></link><updated>2013-02-07T21:27:06+08:00</updated><author><name>Sai</name></author><id>tag:smilehacker.com,2013-02-07:li-yong-rsynczi-dong-tong-bu-fu-wu-qi-yu-ben-di-dai-ma-de-pythonjiao-ben.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;img alt="x" src="http://i.minus.com/ibnh2sUjx4w0D0.jpg" /&gt;
菜鸟表示写web时 每次修改完后把文件往VPS上丢很麻烦&lt;br /&gt;
用ssh sshfs scp都太慢  小东西又懒得用git&lt;br /&gt;
sublimetext上得sftp不支持中文 emacs干脆就只能ssh  &lt;/p&gt;
&lt;p&gt;于是用linux自带的rsync写了个同步脚本&lt;br /&gt;
可以手动或自动往服务器上差异性同步 不用scp一堆东西 也不用忍受ssh那个渣速度  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把脚本copy到你的目录 修改脚本内的配置 如果在脚本内设置了密码 那每次上次就会自动输入密码 否则除非你设置本地key 否则都要输密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果代码在服务器上 先执行 ： &lt;code&gt;python rsync.py -down&lt;/code&gt; 
   把代码download下来 ， 个人觉得先down下来再修改 不用忍受每次load一遍 比较舒服&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次修改完了 可以手动上传:&lt;code&gt;python rsync,py&lt;/code&gt;
    或者也可以放在后台自动上传：&lt;code&gt;python rsync.py -auto&lt;/code&gt;
    他会监视改目录的文件 如果新建 修改或删除 都会sync
    可以用 &lt;code&gt;nohup python rsync.py -auto&amp;amp;&lt;/code&gt; 
    来后台运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只根据emacs优化了 vim党自己改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sync时会忽略隐藏文件和临时文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;

&lt;h1&gt;use rsync to sync code from server&lt;/h1&gt;
&lt;h1&gt;coding = UTF8&lt;/h1&gt;
&lt;h1&gt;@author Kleist Zhou&lt;/h1&gt;
&lt;h1&gt;2013/2/5&lt;/h1&gt;
&lt;h1&gt;Need pyinotify, pexpect&lt;/h1&gt;
&lt;h1&gt;please use easy_install to add in&lt;/h1&gt;
&lt;p&gt;import os
import sys
import pyinotify
import re&lt;/p&gt;
&lt;h1&gt;your sync config&lt;/h1&gt;
&lt;p&gt;server = '199.245.60.73'
user = 'root'
password = ''
port = ''
source = './'
target = '/srv/www/love/public_html/'
options = "-rtvuC --delete --progress --exclude='rsync.py'"&lt;/p&gt;
&lt;h1&gt;custom regular expression&lt;/h1&gt;
&lt;p&gt;rulers = (r"[#~.][\s\S]&lt;em&gt;", r"[\s\S]&lt;/em&gt;[#~]", r"[\s\S]&lt;em&gt;_flymake.[\s\S]&lt;/em&gt;")&lt;/p&gt;
&lt;p&gt;if port != '':
    port = "-e 'ssh -p %d'" % (port)&lt;/p&gt;
&lt;p&gt;def runCmd(cmd):
    global password
    if password == '':
        os.system(cmd)
    else:
        import pexpect
        print cmd
        child = pexpect.spawn(cmd)
        try:
            i = child.expect(['password: ', 'continue connecting (yes/no)?'])
            if i == 0:
                child.sendline(password)
            elif i == 1:
                child.sendline('yes')
        except pexpect.EOF:
            child.close()
        else:
            child.expect(pexpect.EOF)
            child.close()&lt;/p&gt;
&lt;p&gt;def sync():
    global server, user, port, source, target, option
    cmd = "rsync %s %s %s %s@%s:%s" % (port, options, source, user, server, target)
    #print cmd
    runCmd(cmd)&lt;/p&gt;
&lt;p&gt;def download():
    global server, user, port, source, target, option
    cmd = "rsync %s %s %s@%s:%s" % (port, options, user, server, target)
    print cmd
    runCmd(cmd)&lt;/p&gt;
&lt;p&gt;class OnChangeHandler(pyinotify.ProcessEvent):
    def checkFileName(self, fileName):
        global rulers
        for ruler in rulers:
            p = re.compile(ruler)
            if p.match(fileName) != None:
                return False
        return True&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkFileName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process_IN_CREATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Create file: %s &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process_IN_DELETE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Delete file: %s &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process_IN_MODIFY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Modify file: %s &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;def auto_sync():
    wm = pyinotify.WatchManager()
    mask = pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY
    notifier = pyinotify.Notifier(wm, OnChangeHandler())
    wm.add_watch("./", mask, rec=True, auto_add=True)
    notifier.loop()&lt;/p&gt;
&lt;p&gt;def main():
    if len(sys.argv) == 2:
        option = sys.argv[1]
        if option == '-down':
            download()
        elif option == '-auto':
            auto_sync()
    else:
        sync()&lt;/p&gt;
&lt;h1&gt;main&lt;/h1&gt;
&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()&lt;/p&gt;</summary><category term="Python"></category></entry><entry><title>WIN32编程入门</title><link href="http://smilehacker.com/win32bian-cheng-ru-men.html" rel="alternate"></link><updated>2013-02-07T21:01:55+08:00</updated><author><name>Sai</name></author><id>tag:smilehacker.com,2013-02-07:win32bian-cheng-ru-men.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;最近学校工程实训，非要我们用MFC编程，没办法，入门研究了一晚上的win32编程。&lt;/p&gt;
&lt;p _="%" _Windows_="[Windows]" _lang:="[lang:" c_="c++]%" codeblock="codeblock"&gt;学习各种东西，总是开头比较麻烦，自己总结了下win32编程的简单流程，直接上代码了。
&lt;!-- more --&gt;&lt;/p&gt;
&lt;h1&gt;include&lt;/h1&gt;
&lt;h1&gt;include&lt;/h1&gt;
&lt;p&gt;// 窗口过程函数
LRESULT CALLBACK WinSunProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);&lt;/p&gt;
&lt;p&gt;int WINAPI WinMain(
HINSTANCE hInstance, // handle to current instance
HINSTANCE hPrevInstance, // handle to previous instance
LPSTR lpCmdLine, // command line
int nCmdShow // show state
)&lt;/p&gt;
&lt;p&gt;{
// 窗口类
WNDCLASS wndcls;
wndcls.cbClsExtra = 0; // 类附加内存
wndcls.cbWndExtra = 0; // 窗口附加内存
wndcls.hbrBackground = (HBRUSH) GetStockObject(BLACK_BRUSH); // 背景画刷句柄
wndcls.hCursor = LoadCursor(NULL, IDC_CROSS); // 窗口光标句柄
wndcls.hIcon = LoadIcon(NULL, IDI_ERROR); // 窗口图标句柄
wndcls.hInstance = hInstance; // 包含窗口过程函数的程序实例
wndcls.lpfnWndProc = WinSunProc; // 只想窗口过程函数的指针
wndcls.lpszClassName = "Kleist"; // 窗口类名称
wndcls.lpszMenuName = NULL; // 菜单资源
wndcls.style = CS_HREDRAW | CS_VREDRAW; // 窗口样式
RegisterClass(&amp;amp;wndcls);&lt;/p&gt;
&lt;p&gt;// 创建窗口， 定义一个变量用来保存成功创建窗口后返回的句柄
HWND hwnd;
hwnd = CreateWindow( // 窗口创建成功时返回为窗口分配的句柄 失败时返回NULL
"Kleist", // 窗口类名
"Hello World", // 窗口名字
WS_OVERLAPPEDWINDOW, // 窗口样式
0, 0, // 窗口左上角坐标
600, 400, // 窗口宽高
NULL, // 父窗口句柄
NULL, // 窗口菜单句柄
hInstance, // 窗口所属应用程序实例
NULL // WM_CREATE消息附加参数lParam传入的数据指针
);&lt;/p&gt;
&lt;p&gt;// 显示及刷新窗口
ShowWindow(hwnd, SW_SHOWNORMAL);
UpdateWindow(hwnd);&lt;/p&gt;
&lt;p&gt;// 定义消息结构体
MSG msg;
while (GetMessage( // WM_QUIT消息返回0 错误返回-1
&amp;amp;msg, // 指向消息的结构体
NULL, // 指定接收属于哪一窗口的消息 通常设为NULL，用来接收属于调用线程的所有窗口的窗口消息
0, // 获取消息的最小值 通常为0
0)) // 获取消息的最大值 都设为0表示接收所有消息
{
TranslateMessage(&amp;amp;msg); // 将虚拟消息转换为字符消息 投递到调用线程的消息队列中 下次调用GetMessage时被取出
DispatchMessage(&amp;amp;msg); // 将消息传递给操作系统 由操作系统调用窗口过程函数对消息进行处理
}
return msg.wParam;
}&lt;/p&gt;
&lt;p&gt;// 窗口过程函数
LRESULT CALLBACK WinSunProc(
HWND hwnd, // 窗口句柄
UINT uMsg, // 消息代码
WPARAM wParam, // 附加参数
LPARAM lParam
)
{
switch(uMsg)
{
case WM_CHAR:
char szChar[20];
sprintf(szChar, "char code is %d", wParam);
MessageBox(hwnd, szChar, "char", 0);
break;&lt;/p&gt;
&lt;p&gt;default:
return DefWindowProc(hwnd, uMsg, wParam, lParam);
}&lt;/p&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;return 0;
}&lt;/p&gt;
&lt;p&gt;具体也就是WinMain函数作为程序入口，相当于main函数&lt;/p&gt;
&lt;p&gt;然后定义窗口类 绑定过程函数，创建窗口实例，显示并刷新窗口实例，建立消息队列。
对着代码看一些参考资料应该就够了。&lt;/p&gt;</summary><category term="windows"></category></entry></feed>