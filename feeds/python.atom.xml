<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SmileHacker</title><link href="http://smilehacker.com/" rel="alternate"></link><link href="http://smilehacker.com/feeds/python.atom.xml" rel="self"></link><id>http://smilehacker.com/</id><updated>2013-02-07T21:27:06+08:00</updated><entry><title>利用rsync自动同步服务器与本地代码的python脚本</title><link href="http://smilehacker.com/li-yong-rsynczi-dong-tong-bu-fu-wu-qi-yu-ben-di-dai-ma-de-pythonjiao-ben.html" rel="alternate"></link><updated>2013-02-07T21:27:06+08:00</updated><author><name>Sai</name></author><id>tag:smilehacker.com,2013-02-07:li-yong-rsynczi-dong-tong-bu-fu-wu-qi-yu-ben-di-dai-ma-de-pythonjiao-ben.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;img alt="x" src="http://i.minus.com/ibnh2sUjx4w0D0.jpg" /&gt;
菜鸟表示写web时 每次修改完后把文件往VPS上丢很麻烦&lt;br /&gt;
用ssh sshfs scp都太慢  小东西又懒得用git&lt;br /&gt;
sublimetext上得sftp不支持中文 emacs干脆就只能ssh  &lt;/p&gt;
&lt;p&gt;于是用linux自带的rsync写了个同步脚本&lt;br /&gt;
可以手动或自动往服务器上差异性同步 不用scp一堆东西 也不用忍受ssh那个渣速度  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;把脚本copy到你的目录 修改脚本内的配置 如果在脚本内设置了密码 那每次上次就会自动输入密码 否则除非你设置本地key 否则都要输密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果代码在服务器上 先执行 ： &lt;code&gt;python rsync.py -down&lt;/code&gt; 
   把代码download下来 ， 个人觉得先down下来再修改 不用忍受每次load一遍 比较舒服&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每次修改完了 可以手动上传:&lt;code&gt;python rsync,py&lt;/code&gt;
    或者也可以放在后台自动上传：&lt;code&gt;python rsync.py -auto&lt;/code&gt;
    他会监视改目录的文件 如果新建 修改或删除 都会sync
    可以用 &lt;code&gt;nohup python rsync.py -auto&amp;amp;&lt;/code&gt; 
    来后台运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只根据emacs优化了 vim党自己改&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sync时会忽略隐藏文件和临时文件&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;!-- more --&gt;

&lt;p&gt;{% codeblock [rsync.py] [lang: python]%}&lt;/p&gt;
&lt;h1&gt;use rsync to sync code from server&lt;/h1&gt;
&lt;h1&gt;coding = UTF8&lt;/h1&gt;
&lt;h1&gt;@author Kleist Zhou&lt;/h1&gt;
&lt;h1&gt;2013/2/5&lt;/h1&gt;
&lt;h1&gt;Need pyinotify, pexpect&lt;/h1&gt;
&lt;h1&gt;please use easy_install to add in&lt;/h1&gt;
&lt;p&gt;import os
import sys
import pyinotify
import re&lt;/p&gt;
&lt;h1&gt;your sync config&lt;/h1&gt;
&lt;p&gt;server = '199.245.60.73'
user = 'root'
password = ''
port = ''
source = './'
target = '/srv/www/love/public_html/'
options = "-rtvuC --delete --progress --exclude='rsync.py'"&lt;/p&gt;
&lt;h1&gt;custom regular expression&lt;/h1&gt;
&lt;p&gt;rulers = (r"[#~.][\s\S]&lt;em&gt;", r"[\s\S]&lt;/em&gt;[#~]", r"[\s\S]&lt;em&gt;_flymake.[\s\S]&lt;/em&gt;")&lt;/p&gt;
&lt;p&gt;if port != '':
    port = "-e 'ssh -p %d'" % (port)&lt;/p&gt;
&lt;p&gt;def runCmd(cmd):
    global password
    if password == '':
        os.system(cmd)
    else:
        import pexpect
        print cmd
        child = pexpect.spawn(cmd)
        try:
            i = child.expect(['password: ', 'continue connecting (yes/no)?'])
            if i == 0:
                child.sendline(password)
            elif i == 1:
                child.sendline('yes')
        except pexpect.EOF:
            child.close()
        else:
            child.expect(pexpect.EOF)
            child.close()&lt;/p&gt;
&lt;p&gt;def sync():
    global server, user, port, source, target, option
    cmd = "rsync %s %s %s %s@%s:%s" % (port, options, source, user, server, target)
    #print cmd
    runCmd(cmd)&lt;/p&gt;
&lt;p&gt;def download():
    global server, user, port, source, target, option
    cmd = "rsync %s %s %s@%s:%s" % (port, options, user, server, target)
    print cmd
    runCmd(cmd)&lt;/p&gt;
&lt;p&gt;class OnChangeHandler(pyinotify.ProcessEvent):
    def checkFileName(self, fileName):
        global rulers
        for ruler in rulers:
            p = re.compile(ruler)
            if p.match(fileName) != None:
                return False
        return True&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;checkFileName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileName&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sync&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process_IN_CREATE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Create file: %s &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process_IN_DELETE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Delete file: %s &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;process_IN_MODIFY&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Modify file: %s &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;syncFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;def auto_sync():
    wm = pyinotify.WatchManager()
    mask = pyinotify.IN_CREATE | pyinotify.IN_DELETE | pyinotify.IN_MODIFY
    notifier = pyinotify.Notifier(wm, OnChangeHandler())
    wm.add_watch("./", mask, rec=True, auto_add=True)
    notifier.loop()&lt;/p&gt;
&lt;p&gt;def main():
    if len(sys.argv) == 2:
        option = sys.argv[1]
        if option == '-down':
            download()
        elif option == '-auto':
            auto_sync()
    else:
        sync()&lt;/p&gt;
&lt;h1&gt;main&lt;/h1&gt;
&lt;p _="%" endcodeblock="endcodeblock"&gt;if &lt;strong&gt;name&lt;/strong&gt; == "&lt;strong&gt;main&lt;/strong&gt;":
    main()&lt;/p&gt;</summary><category term=""></category></entry><entry><title>自动获取Nexus4售卖状态的Python脚本</title><link href="http://smilehacker.com/zi-dong-huo-qu-nexus4shou-mai-zhuang-tai-de-pythonjiao-ben.html" rel="alternate"></link><updated>2013-02-07T21:24:06+08:00</updated><author><name>Sai</name></author><id>tag:smilehacker.com,2013-02-07:zi-dong-huo-qu-nexus4shou-mai-zhuang-tai-de-pythonjiao-ben.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;img alt="Nexus 4" src="http://i.i.com.com/cnwk.1d/i/tim/2012/12/17/nexus4.png" /&gt;
使用pyquery做爬虫解析GooglePlay页面 获取状态
然后通过Gmail发给指定邮箱
每隔一个小时自动检测一次
使用 &lt;code&gt;&lt;strong&gt;nohup python *.py &amp;amp;&lt;/strong&gt;&lt;/code&gt; 可在后台运行&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;{% codeblock [Python] [lang: python]%}&lt;/p&gt;
&lt;h1&gt;coding=utf-8&lt;/h1&gt;
&lt;h1&gt;easy_install pyquery OR sudo apt-get install python-pyquery&lt;/h1&gt;
&lt;p&gt;from pyquery import PyQuery as pq
import smtplib
from email.Message import Message
import time&lt;/p&gt;
&lt;h1&gt;发给谁&lt;/h1&gt;
&lt;p&gt;mailto_list = "xxx@xx.xx"&lt;/p&gt;
&lt;h1&gt;设置服务器 用户名 口令 邮箱后缀&lt;/h1&gt;
&lt;p&gt;mail_host = "smtp.gmail.com"
mail_user = "xxx@gmail.com"
mail_pass = "you password"&lt;/p&gt;
&lt;p&gt;def sendMail(sub, content):
    '''
    sub:主题
    content:内容
    '''
    msg = Message()
    msg['Subject'] = sub
    msg['From'] = mail_user
    msg['To'] = mailto_list
    msg.set_payload(content)
    try:
        s = smtplib.SMTP(mail_host, port=587, timeout=200)
        s.starttls()
        s.login(mail_user, mail_pass)
        s.sendmail(mail_user, mailto_list, msg.as_string())
        return True
    except Exception, e:
        print str(e)
        return False&lt;/p&gt;
&lt;p&gt;def checkSoldState():
    doc = pq(url = r'https://play.google.com/store/devices/details?id=nexus_4_16gb')
    soldMsg = doc('span').filter('.hardware-price-description').text()
    print soldMsg
    if soldMsg != 'Sold out':
        print 'sent mail'
        sendMail('Nexus4 Info', 'Sold out')&lt;/p&gt;
&lt;p&gt;def say():
    print "hello"&lt;/p&gt;
&lt;h1&gt;main&lt;/h1&gt;
&lt;p&gt;while True:
    checkSoldState()
    time.sleep(3600)
[/python]&lt;/p&gt;
&lt;p&gt;{% endcodeblock %}&lt;/p&gt;</summary><category term=""></category></entry></feed>